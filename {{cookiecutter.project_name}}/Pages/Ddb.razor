@page "/ddb"
@layout MainLayout
@attribute [Authorize]
@using Amazon;
@using Amazon.CognitoIdentity;
@using Amazon.DynamoDBv2;
@using Amazon.DynamoDBv2.Model;
@inject IAccountService AccountService;
@inject IConfiguration Configuration;

<MudPaper Class="pa-4 ma-2" Outlined="true">
    <MudDataGrid Items="@Elements">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <Column T="Person" Field="Name" Title="N" />
        <Column T="Person" Field="Firstname" />
    </Columns>
    </MudDataGrid>

    <MudButton OnClick="loadData">Load Data</MudButton>
</MudPaper>

@code
{
    class Person{
        public string Firstname { get; set; }
        public string Name { get; set; }
        public Person(string firstname, string name) 
        {
            Firstname = firstname;
            Name = name;
        }
    }

    private IList<Person> Elements = new List<Person>();

    private AmazonDynamoDBClient? client;

    protected override async Task OnInitializedAsync()
    {
        Elements = new List<Person>(){new Person("Brad","Pitt")};
        Elements.Add(new Person("Angelina", "Jolie"));

        var credentials = await AccountService.GetCredentials();

        client = new AmazonDynamoDBClient(credentials,
        RegionEndpoint.GetBySystemName(Configuration["AWS:region"]));
    }

    async void loadData()
    {
        if(client == null) return;
        
        var response = await client.ScanAsync("BlazorTest", new List<string>());

        foreach (Dictionary<string, AttributeValue> item in response.Items)
        {
            var name = item.GetValueOrDefault("Name");
            var value = item.GetValueOrDefault("Value");
            if (name != null && value != null)
            {
                Elements.Add(new Person(value.S, value.S));
                StateHasChanged();
            }
        }
    }
}